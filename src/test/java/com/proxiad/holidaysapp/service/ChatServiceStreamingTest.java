package com.proxiad.holidaysapp.service;

import com.proxiad.holidaysapp.config.TestRestTemplateConfig;
import com.proxiad.holidaysapp.config.TestSecurityConfig;
import com.proxiad.holidaysapp.dto.ChatMessage;
import com.proxiad.holidaysapp.dto.ChatRequest;
import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureTestEntityManager;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestConstructor;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

@SpringBootTest
@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)
@Import({TestSecurityConfig.class, TestRestTemplateConfig.class})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@AutoConfigureTestEntityManager
@RequiredArgsConstructor
public class ChatServiceStreamingTest {

    public static final String SYTEM_PROMPT = "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ë–æ–ª–≥–∞—Ä–∏–∏.";
    private final ChatService chatService;
    private final DebugChatService debugChatService;
    private final String longPrompt = """
        –ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —ç—Å—Å–µ –æ —Ç—É—Ä–∏–∑–º–µ –≤ –ë–æ–ª–≥–∞—Ä–∏–∏, –æ—Ö–≤–∞—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:
        1. –ì–æ—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ç—Ä–µ–∫–∫–∏–Ω–≥
        2. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 
        3. –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        4. –°–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–µ–∑–¥–∫–∏
        5. –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
        """;

    @Test
    void demonstrateStreamingEffect() {

        AtomicInteger chunkCount = new AtomicInteger(0);
        AtomicLong totalChars = new AtomicLong(0);

        System.out.println("üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥...\n");
        System.out.println("=" .repeat(50));

        long startTime = System.currentTimeMillis();

        debugChatService.askStreaming(getChatRequest(), chunk -> {
            chunkCount.incrementAndGet();
            totalChars.addAndGet(chunk.length());

            // –≠–º—É–ª–∏—Ä—É–µ–º "–ø–µ—á–∞—Ç—å" –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            System.out.print(chunk);
            System.out.flush();

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            try { Thread.sleep(15); } catch (InterruptedException ignored) {}
        });

        long endTime = System.currentTimeMillis();

        System.out.println("\n" + "=" .repeat(50));
        System.out.print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n");
        System.out.printf("–ß–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: %d\n", chunkCount.get());
        System.out.printf("–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: %d\n", totalChars.get());
        System.out.printf("–û–±—â–µ–µ –≤—Ä–µ–º—è: %d –º—Å\n", endTime - startTime);
    }

    private ChatRequest getChatRequest(){
        return ChatRequest.builder()
                .model("gpt-4")
                .messages(List.of(
                        new ChatMessage("assistant", SYTEM_PROMPT),
                        new ChatMessage("user", longPrompt)))
                .build();
    }
}
