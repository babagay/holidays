import React, { useState, useRef, useEffect } from 'react';
import { useConfig } from '../Context/Config.js';

const EnhancedStreamTest = () => {
    const [response, setResponse] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [chunkCount, setChunkCount] = useState(0);
    const [totalChars, setTotalChars] = useState(0);
    const [error, setError] = useState('');

    const { apiUrl } = useConfig();
    const base = 'http://localhost:8080';
    const streamUrl = `${base}/chat/stream/test-flux`;

    const abortControllerRef = useRef(null);
    const responseEndRef = useRef(null);

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
//    useEffect(() => {
//        if (responseEndRef.current) {
//            responseEndRef.current.scrollIntoView({ behavior: 'smooth' });
//        }
//    }, [response]);

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const testRequests = [
        {
            name: "üèîÔ∏è –ì–æ—Ä—ã –ë–æ–ª–≥–∞—Ä–∏–∏",
            prompt: "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ 5 —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–∏—Ö –≥–æ—Ä–∞—Ö –ë–æ–ª–≥–∞—Ä–∏–∏, –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –¥–ª—è —Ö–∞–π–∫–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫."
        }
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    const formatText = (text) => {
        let formatted = text;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        formatted = formatted.replace(/([.,!?;:])([–∞-—è–ê-–Øa-zA-Z])/g, '$1 $2');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏, –≥–¥–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        formatted = formatted.replace(/([–∞-—è–ê-–Øa-zA-Z])([–ê-–ØA-Z])/g, '$1 $2'); // –ú–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏, –≥–¥–µ –≤—Ç–æ—Ä–æ–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
        formatted = formatted.replace(/(\d)([–∞-—è–ê-–Øa-zA-Z])/g, '$1 $2'); // –ú–µ–∂–¥—É —Ü–∏—Ñ—Ä–æ–π –∏ –±—É–∫–≤–æ–π
        formatted = formatted.replace(/([–∞-—è–ê-–Øa-zA-Z])(\d)/g, '$1 $2'); // –ú–µ–∂–¥—É –±—É–∫–≤–æ–π –∏ —Ü–∏—Ñ—Ä–æ–π

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
        formatted = formatted.replace(/(\d+)\.([–∞-—è–ê-–Øa-zA-Z])/g, '$1. $2'); // "1.–ú—É—Å–∞–ª–∞" -> "1. –ú—É—Å–∞–ª–∞"
        formatted = formatted.replace(/(\d+),/g, '$1.'); // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
        formatted = formatted.replace(/(\d+\.\s)/g, '\n$1'); // –ü–µ—Ä–µ–Ω–æ—Å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—É–Ω–∫—Ç–æ–º —Å–ø–∏—Å–∫–∞

        return formatted;
    };

    // üìå –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    const startSSEStream = async (prompt) => {
        setIsLoading(true);
        setResponse('');
        setChunkCount(0);
        setTotalChars(0);
        setError('');

        abortControllerRef.current = new AbortController();

        try {
            const response = await fetch(streamUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model: "gpt-4",
                    messages: [{
                        role: "user",
                        content: prompt + " –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞."
                    }],
                    temperature: 0.7
                }),
                signal: abortControllerRef.current.signal
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            let buffer = '';
            let accumulatedText = '';

            const processChunk = async () => {
                try {
                    const { done, value } = await reader.read();

                    if (done) {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞
                        if (accumulatedText) {
                            const formattedText = formatText(accumulatedText);
                            setResponse(prev => prev + formattedText);
                            setTotalChars(prev => prev + formattedText.length);
                        }
                        setIsLoading(false);
                        return;
                    }

                    const chunk = decoder.decode(value, { stream: true });
                    buffer += chunk;

                    const lines = buffer.split('\n');
                    buffer = lines.pop() || '';

                    for (const line of lines) {
                        if (line.startsWith('data:')) {
                            const dataContent = line.substring(5).trim();

                            if (dataContent && dataContent !== '[DONE]') {
                                accumulatedText += dataContent;
                                setChunkCount(prev => prev + 1);

                                console.log('üî§ Character received:', dataContent);

                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
                                const shouldFlush =
                                    dataContent.match(/[\s,.!?;:\n]/) || // –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
                                    accumulatedText.length > 15 || // –î–ª–∏–Ω–∞
                                    dataContent.match(/\d\./); // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å–ø–∏—Å–∫–∞

                                if (shouldFlush && accumulatedText) {
                                    const formattedText = formatText(accumulatedText);
                                    setResponse(prev => prev + formattedText);
                                    setTotalChars(prev => prev + formattedText.length);
                                    accumulatedText = '';

                                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                                    await new Promise(resolve => setTimeout(resolve, 30));
                                }
                            }
                        }
                    }

                    processChunk();
                } catch (error) {
                    if (error.name !== 'AbortError') {
                        console.error('Stream error:', error);
                        setError(`–û—à–∏–±–∫–∞: ${error.message}`);
                        setIsLoading(false);
                    }
                }
            };

            processChunk();

        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error('Connection error:', error);
                setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
                setIsLoading(false);
            }
        }
    };

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const startSSEStreamSimple = async (prompt) => {
        setIsLoading(true);
        setResponse('');
        setChunkCount(0);
        setTotalChars(0);
        setError('');

        abortControllerRef.current = new AbortController();

        try {
            const response = await fetch(streamUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model: "gpt-4",
                    messages: [{
                        role: "user",
                        content: prompt + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
                    }],
                    temperature: 0.7
                }),
                signal: abortControllerRef.current.signal
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            let buffer = '';
            let fullText = '';

            const processChunk = async () => {
                try {
                    const { done, value } = await reader.read();

                    if (done) {
                        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        const formattedText = formatText(fullText);
                        setResponse(formattedText);
                        setIsLoading(false);
                        return;
                    }

                    const chunk = decoder.decode(value, { stream: true });
                    buffer += chunk;

                    const lines = buffer.split('\n');
                    buffer = lines.pop() || '';

                    for (const line of lines) {
                        if (line.startsWith('data:')) {
                            const dataContent = line.substring(5).trim();

                            if (dataContent && dataContent !== '[DONE]') {
                                fullText += dataContent;
                                setChunkCount(prev => prev + 1);
                                setTotalChars(prev => prev + dataContent.length);

                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                                const formattedText = formatText(fullText);
                                setResponse(formattedText);

                                console.log('üî§ Character received:', dataContent);

                                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                                await new Promise(resolve => setTimeout(resolve, 20));
                            }
                        }
                    }

                    processChunk();
                } catch (error) {
                    if (error.name !== 'AbortError') {
                        console.error('Stream error:', error);
                        setError(`–û—à–∏–±–∫–∞: ${error.message}`);
                        setIsLoading(false);
                    }
                }
            };

            processChunk();

        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error('Connection error:', error);
                setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
                setIsLoading(false);
            }
        }
    };

    const stopStream = () => {
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
            console.log('üõë Stream stopped by user');
        }
        setIsLoading(false);
    };

    const clearAll = () => {
        stopStream();
        setResponse('');
        setChunkCount(0);
        setTotalChars(0);
        setError('');
    };

    return (
        <div style={{ maxWidth: 800, margin: '0 auto', padding: 20 }}>
            <h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSE Stream API</h1>

            <div style={{ margin: '20px 0' }}>
                <h3>–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã:</h3>
                <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap', marginBottom: '15px' }}>
                    {testRequests.map((test, index) => (
                        <button
                            key={index}
                            onClick={() => startSSEStreamSimple(test.prompt)}
                            disabled={isLoading}
                            style={{
                                padding: '10px 15px',
                                border: '1px solid #007bff',
                                background: isLoading ? '#f8f9fa' : 'white',
                                color: isLoading ? '#6c757d' : '#007bff',
                                borderRadius: '5px',
                                cursor: isLoading ? 'not-allowed' : 'pointer',
                                opacity: isLoading ? 0.6 : 1
                            }}
                        >
                            {isLoading ? 'üîÑ –°—Ç—Ä–∏–º–∏–Ω–≥...' : test.name}
                        </button>
                    ))}
                </div>

                <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>
                    <button
                        onClick={stopStream}
                        disabled={!isLoading}
                        style={{
                            padding: '8px 16px',
                            border: '1px solid #dc3545',
                            background: !isLoading ? '#f8f9fa' : 'white',
                            color: '#dc3545',
                            borderRadius: '5px',
                            cursor: !isLoading ? 'not-allowed' : 'pointer',
                            opacity: !isLoading ? 0.6 : 1
                        }}
                    >
                        ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>

                    <button
                        onClick={clearAll}
                        style={{
                            padding: '8px 16px',
                            border: '1px solid #6c757d',
                            background: 'white',
                            color: '#6c757d',
                            borderRadius: '5px',
                            cursor: 'pointer'
                        }}
                    >
                        üßπ –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                </div>
            </div>

            <div style={{
                display: 'flex',
                gap: '20px',
                margin: '15px 0',
                padding: '15px',
                background: '#f8f9fa',
                borderRadius: '6px',
                flexWrap: 'wrap'
            }}>
                <div>üìä –ß–∞–Ω–∫–æ–≤: <strong>{chunkCount}</strong></div>
                <div>üî¢ –°–∏–º–≤–æ–ª–æ–≤: <strong>{totalChars}</strong></div>
                <div>üîÑ –°—Ç–∞—Ç—É—Å: <strong>{isLoading ? '–ò–¥–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥...' : '–ì–æ—Ç–æ–≤'}</strong></div>
            </div>

            {error && (
                <div style={{
                    background: '#f8d7da',
                    color: '#721c24',
                    padding: '10px',
                    borderRadius: '4px',
                    margin: '10px 0'
                }}>
                    ‚ùå {error}
                </div>
            )}

            <div>
                <h3>–û—Ç–≤–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:</h3>
                <div
                    style={{
                        border: '2px solid #e9ecef',
                        borderRadius: '8px',
                        padding: '20px',
                        minHeight: '300px',
                        maxHeight: '500px',
                        overflowY: 'auto',
                        background: '#fafafa',
                        whiteSpace: 'pre-wrap',
                        lineHeight: '1.6',
                        fontFamily: 'Arial, sans-serif',
                        fontSize: '16px'
                    }}
                >
                    {response || '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç...'}
                    <div ref={responseEndRef} />
                </div>
            </div>
        </div>
    );
};

export default EnhancedStreamTest;