import React, { useState } from 'react';
import './StreamTest.css';

const StreamTest = () => {
    const [response, setResponse] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [chunkCount, setChunkCount] = useState(0);
    const [totalChars, setTotalChars] = useState(0);

     const {apiUrl} = useConfig();
     const streamUrl = `${apiUrl}/chat/stream/test-flux`; // .../stream/flux

    const testSlowStream = async () => {
        setIsLoading(true);
        setResponse('');
        setChunkCount(0);
        setTotalChars(0);

        try {
            const response = await fetch(streamUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model: "gpt-4",
                    messages: [
                        {
                            role: "user",
                            content: "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ 10 —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–∏—Ö –≥–æ—Ä–∞—Ö –ë–æ–ª–≥–∞—Ä–∏–∏, –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –º–∞—Ä—à—Ä—É—Ç–∞—Ö –¥–ª—è —Ö–∞–π–∫–∏–Ω–≥–∞ –∏ –ª—É—á—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º."
                        }
                    ],
                    temperature: 0.7,
                    maxTokens: 1000
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();

                if (done) {
                    setIsLoading(false);
                    break;
                }

                const chunk = decoder.decode(value, { stream: true });

                setResponse(prev => prev + chunk);
                setChunkCount(prev => prev + 1);
                setTotalChars(prev => prev + chunk.length);

                // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                setTimeout(() => {
                    const responseElement = document.getElementById('response-area');
                    if (responseElement) {
                        responseElement.scrollTop = responseElement.scrollHeight;
                    }
                }, 0);
            }

        } catch (error) {
            console.error('Error:', error);
            setResponse(prev => prev + `\n\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setIsLoading(false);
        }
    };

    return (
        <div className="stream-test-container">
            <h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Slow Stream</h1>

            <div className="controls">
                <button
                    onClick={testSlowStream}
                    disabled={isLoading}
                    className="test-button"
                >
                    {isLoading ? 'üîÑ –°—Ç—Ä–∏–º–∏–Ω–≥...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
                </button>

                {isLoading && (
                    <div className="loading-indicator">
                        <div className="spinner"></div>
                        <span>–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º...</span>
                    </div>
                )}
            </div>

            <div className="stats">
                <div>üìä –ß–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <strong>{chunkCount}</strong></div>
                <div>üî¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: <strong>{totalChars}</strong></div>
            </div>

            <div className="response-container">
                <h3>–û—Ç–≤–µ—Ç (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ):</h3>
                <div
                    id="response-area"
                    className="response-area"
                >
                    {response || (
                        <div className="placeholder">
                            –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ —á–∞—Å—Ç—è–º...
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default StreamTest;